import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { Repository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';
import { Part } from './part.entity';
import { CreatePartDto, ResponsePartDto, UpdatePartDto } from './dto/part.dto';

@Injectable()
export class PartService {
  private readonly logger = new Logger(PartService.name);

  constructor(
    @InjectRepository(Part)
    private readonly partRepository: Repository<Part>,
  ) {}

  async findAll(): Promise<ResponsePartDto[]> {
    try {
      const parts = await this.partRepository.find();

      // const response: ResponsePartDto[] = [];

      // if (Array.isArray(parts)) {
      //   for (const part of parts) {
      //     const parseData = JSON.parse(part.dataJson);
      //     this.logger.debug(parseData);
      //     this.logger.debug(
      //       `List: id: ${part.id}, name: ${part.name}, description: ${part.description}, data_json: ${JSON.stringify(part.dataJson)}, created_at: ${part.createdAt}, updated_at: ${part.updatedAt}`,
      //     );
      //   }
      // }
      // const s = ResponsePartDto.convertFromPart(null);
      // console.log(s);

      return ResponsePartDto.convertFromPart(parts);
    } catch (error) {
      this.logger.debug(error);
      throw error;
    }
  }

  async findOne(name: string): Promise<Part> {
    try {
      const part = await this.partRepository.findOne({ where: { name } });
      // .then((res) => {
      //   console.log('res', res);
      //   return {
      //     id: res.id,
      //     name: res.name,
      //     description: res.description,
      //     dataJson: JSON.stringify(res.dataJson),
      //     createdAt: res.createdAt,
      //     updatedAt: res.updatedAt,
      //   };
      // });
      if (!part) {
        throw new NotFoundException(`"${name}" Not Found.`);
      }
      return ResponsePartDto.convertFromPart([part])?.[0] || null;
    } catch (error) {
      this.logger.error(error);
      throw error;
    }
  }

  async create(createPartDto: CreatePartDto): Promise<ResponsePartDto> {
    try {
      const result = await this.partRepository.save(createPartDto, {
        reload: true,
      });

      if (!result) {
        throw new Error('Create Part Failed');
      }

      const created = await this.partRepository.findOne({
        where: { id: result.id },
      });

      return ResponsePartDto.convertFromPart([created])?.[0] || null;
    } catch (error) {
      this.logger.debug(error);
      throw error;
    }
  }

  async remove(name: string) {
    try {
      const part = await this.partRepository.findOne({ where: { name } });
      if (!part) {
        throw new NotFoundException(`"${name}" Not Found.`);
      }

      await this.partRepository.delete({ name: name });

      return ResponsePartDto.convertFromPart([part])?.[0] || null;
    } catch (error) {
      this.logger.debug(error);
      throw error;
    }
  }

  async update(name: string, updatePart: UpdatePartDto) {
    try {
      const part = await this.partRepository.findOne({ where: { name } });
      if (!part) {
        throw new NotFoundException(`"${name}" Not Found.`);
      }

      await this.partRepository.save({
        ...part,
        ...updatePart,
      });

      const updated = await this.partRepository.findOne({ where: { name } });

      return ResponsePartDto.convertFromPart([updated])?.[0] || null;
    } catch (error) {
      this.logger.debug(error);
      throw error;
    }
  }

  async findOneById(id: number): Promise<Part> {
    try {
      const part = await this.partRepository.findOne({ where: { id } });
      if (!part) {
        throw new NotFoundException(`"${id}" Not Found.`);
      }
      return ResponsePartDto.convertFromPart([part])?.[0] || null;
    } catch (error) {
      this.logger.error(error);
      throw error;
    }
  }

  async updateById(id: number, updatePart: UpdatePartDto) {
    try {
      const part = await this.partRepository.findOne({ where: { id } });
      if (!part) {
        throw new NotFoundException(`${id} Not Found.`);
      }

      await this.partRepository.save({
        ...part,
        ...updatePart,
      });

      const updated = await this.partRepository.findOne({ where: { id } });

      return ResponsePartDto.convertFromPart([updated])?.[0] || null;
    } catch (error) {
      this.logger.debug(error);
      throw error;
    }
  }

  // async findPart(id: number): Promise<Part> {
  //   let part;
  //   try {
  //     part = await this.partRepository.findOneBy({ id: id });
  //     return part || null;
  //   } catch (error) {
  //     return null;
  //   }
  // }
}
